1.Every object in Ruby has access to a method called object_id, which returns a
numerical value that uniquely identifies the object. This method can be used to
determine whether two variables are pointing to the same object.

Take a look at the following code and predict the output:

  a = "forty two"
  b = "forty two"
  c = a

  puts a.object_id
  puts b.object_id
  puts c.object_id

----

Strings are mutable, thus there can be multiple copies of the same information
in memory, because if it wasn't, unpredictable side effects could happen. So in
this case, a and c will have the same object_id, while b would have a different
one. Basically a and b hold different objects, that just have the same data.

================================================================================

2.Let's take a look at another example with a small difference in the code:

  a = 42
  b = 42
  c = a

  puts a.object_id
  puts b.object_id
  puts c.object_id

----

Integers, unlike strings, are immutable, so to save memory there is only one of
each instance in memory. When you assign an integer literal, you are just
pointing to that one integer literal. In this case, a, b, and c will all point
to the same object_id.

================================================================================

3.Let's call a method, and pass both a string and an array as arguments and see how even though they are treated in the same way by Ruby, the results can be different.

Study the following code and state what will be displayed...and why:

  def tricky_method(a_string_param, an_array_param)
    a_string_param += "rutabaga"
    an_array_param << "rutabaga"
  end

  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method(my_string, my_array)

  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"

----

  My string looks like this now: pumpkins
  My array looks like this now: ['pumpkins', 'rutabaga']

Basically the += operator on strings and arrays is non-mutating, while << is
mutating. In this case, tricky_method creates a new string that contains
"pumpkinsrutabaga" and alters the original array adding 'rutabaga'

================================================================================

4.To drive that last one home...let's turn the tables and have the string show a modified output, while the array thwarts the method's efforts to modify the user's version of it.

  def tricky_method_two(a_string_param, an_array_param)
    a_string_param << 'rutabaga'
    an_array_param = ['pumpkins', 'rutabaga']
  end

  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method_two(my_string, my_array)

  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"

----
There's not really a question here, it just shows that assignment on array doesn't mutate the original and that << on string does.

  My string looks like this now: pumpkinsrutabaga
  My array looks like this now: ['pumpkins']

================================================================================

5. Depending on a method to modify its arguments can be tricky:

  def tricky_method(a_string_param, an_array_param)
    a_string_param += "rutabaga"
    an_array_param << "rutabaga"
  end

  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method(my_string, my_array)

  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"

Whether the above "coincidentally" does what we think we wanted depends upon what is going on inside the method.

How can we change this code to make the result easier to predict and easier for
the next programmer to maintain? That is, the resulting method should not
mutate either argument, but my_string should be set to 'pumpkinsrutabaga' and
my_array should be set to ['pumpkins', 'rutabaga']

----

Originally, I thought we should split the method into methods, since changing a
string and array is confusing for one method to do. It should only have one
purpose, not two. The solution is to use non-mutating concatenation and return
both values according to LaunchSchool. I will probably revisit this question at
a later date, since I saw the answer today.

================================================================================

6.How could the following method be simplified without changing its return
value?

  def color_valid(color)
    if color == "blue" || color == "green"
      true
    else
      false
    end
  end

----

  def color_valid(color)
    color == "blue" || color == "green"
  end
