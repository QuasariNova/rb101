1.Every object in Ruby has access to a method called object_id, which returns a
numerical value that uniquely identifies the object. This method can be used to
determine whether two variables are pointing to the same object.

Take a look at the following code and predict the output:

  a = "forty two"
  b = "forty two"
  c = a

  puts a.object_id
  puts b.object_id
  puts c.object_id

----

Strings are mutable, thus there can be multiple copies of the same information
in memory, because if it wasn't, unpredictable side effects could happen. So in
this case, a and c will have the same object_id, while b would have a different
one. Basically a and b hold different objects, that just have the same data.

================================================================================

2.Let's take a look at another example with a small difference in the code:

  a = 42
  b = 42
  c = a

  puts a.object_id
  puts b.object_id
  puts c.object_id

----

Integers, unlike strings, are immutable, so to save memory there is only one of
each instance in memory. When you assign an integer literal, you are just
pointing to that one integer literal. In this case, a, b, and c will all point
to the same object_id.

================================================================================

Let's call a method, and pass both a string and an array as arguments and see how even though they are treated in the same way by Ruby, the results can be different.

Study the following code and state what will be displayed...and why:

  def tricky_method(a_string_param, an_array_param)
    a_string_param += "rutabaga"
    an_array_param << "rutabaga"
  end

  my_string = "pumpkins"
  my_array = ["pumpkins"]
  tricky_method(my_string, my_array)

  puts "My string looks like this now: #{my_string}"
  puts "My array looks like this now: #{my_array}"

----

  My string looks like this now: pumpkins
  My array looks like this now: ['pumpkins', 'rutabaga']

Basically the + operator on strings and arrays is non-mutating, while << is
mutating. In this case, tricky_method creates a new string that contains "pumpkinsrutabaga" and alters the original array adding 'rutabaga'
