1.What do you expect to happen when the greeting variable is referenced in the
last line of the code below?

  if false
    greeting = "hello world"
  end

  greeting

----

nil. If something is initialized in an if, ruby automatically initializes it as
nil just in case the if doesn't run. I got this wrong before trying to run it in irb, guessing an error would happen.

================================================================================

2.What is the result of the last line in the code below?

  greetings = { a: 'hi' }
  informal_greeting = greetings[:a]
  informal_greeting << ' there'

  puts informal_greeting  #  => "hi there"
  puts greetings

----

  {:a=>'hi there'}

We assign a reference to the string in the Hash and then mutate that string, so
the string in the hash is the same string, thus changes.

================================================================================

3. In other practice problems, we have looked at how the scope of variables
affects the modification of one "layer" when they are passed to another.

To drive home the salient aspects of variable scope and modification of one
scope by another, consider the following similar sets of code.

What will be printed by each of these code groups?

A)
  def mess_with_vars(one, two, three)
    one = two
    two = three
    three = one
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"

B)
  def mess_with_vars(one, two, three)
    one = "two"
    two = "three"
    three = "one"
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"

C)
  def mess_with_vars(one, two, three)
    one.gsub!("one","two")
    two.gsub!("two","three")
    three.gsub!("three","one")
  end

  one = "one"
  two = "two"
  three = "three"

  mess_with_vars(one, two, three)

  puts "one is: #{one}"
  puts "two is: #{two}"
  puts "three is: #{three}"

----

A)
  one is: one
  two is: two
  three is: three

B)
  one is: one
  two is: two
  three is: three

C)
  one is: two
  two is: three
  three is: one
